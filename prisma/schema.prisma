datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// NextAuth.js User Model
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? // NextAuth.js requires this for email verification flows
  image         String?   // NextAuth.js uses this for user avatars/profile pictures

  // Your custom fields
  phone         String?   @unique
  credits       Int       @default(0)
  referredBy    String?
  referralCode  String?   @unique

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // NextAuth.js relations
  accounts      Account[] // Link to the Account model for OAuth/credentials
  sessions      Session[] // Link to the Session model for user sessions

  // Your custom relations
  referralsMade Referral[] @relation("Referrer")
  referralsGot  Referral[] @relation("Referee")
  transactions  Transaction[]
}

// NextAuth.js Account Model (Crucial for OAuth/credentials)
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text // Use @db.Text for potentially long tokens
  access_token      String? @db.Text // Use @db.Text for potentially long tokens
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text // Use @db.Text for potentially long tokens
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// NextAuth.js Session Model
model Session {
  id           String    @id @default(cuid())
  sessionToken String    @unique // NextAuth.js uses sessionToken
  userId       String
  expires      DateTime
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// NextAuth.js Verification Token Model (for email sign-in/verification)
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Your existing custom models (retained as is)
model VerificationCode { // Assuming this is for phone verification, separate from NextAuth.js Email
  phone     String   @id
  code      String
  createdAt DateTime @default(now())
}

model Referral {
  id         String   @id @default(cuid())
  referrerId String
  refereeId  String
  rewarded   Boolean
  createdAt  DateTime @default(now())

  referrer   User     @relation("Referrer", fields: [referrerId], references: [id])
  referee    User     @relation("Referee", fields: [refereeId], references: [id])
}

model Transaction {
  id           String   @id @default(cuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  amount       Int
  isFirstTopUp Boolean  @default(false)
  createdAt    DateTime @default(now())
}

model TopUpSubmission {
  id           String   @id @default(cuid())
  name         String
  phone        String
  referralCode String?
  imageUrl     String
  createdAt    DateTime @default(now())
}
