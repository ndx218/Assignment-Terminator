// prisma/schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// 定义用户角色枚举
enum UserRole {
  USER  // 普通用户
  ADMIN // 管理员
}

// NextAuth.js User Model
// 包含 NextAuth.js 适配器期望的字段，以及您的自定义字段
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? // NextAuth.js requires this for email verification flows
  image         String?   // NextAuth.js uses this for user avatars/profile pictures

  // Your custom fields
  phone         String?   @unique
  credits       Int       @default(0)
  referredBy    String?
  referralCode  String?   @unique

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  role          UserRole  @default(USER) // <-- 新增的 role 字段，默认是 USER

  // NextAuth.js relations
  accounts      Account[] // Link to the Account model for OAuth/credentials
  sessions      Session[] // Link to the Session model for user sessions

  // Your custom relations
  referralsMade Referral[] @relation("Referrer")
  referralsGot  Referral[] @relation("Referee")
  transactions  Transaction[]
}

// NextAuth.js Account Model (OAuth/credentials 的关键)
// 包含 NextAuth.js 适配器期望的所有字段
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text // 使用 @db.Text 防止长 token 溢出
  access_token      String? @db.Text // 使用 @db.Text 防止长 token 溢出
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text // 使用 @db.Text 防止长 token 溢出
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// NextAuth.js Session Model
// 已调整为 NextAuth.js 期望的 `sessionToken` 和 `expires` 字段
model Session {
  id           String    @id @default(cuid())
  sessionToken String    @unique // **关键修改：将 'token' 改为 'sessionToken'**
  userId       String
  expires      DateTime  // **关键修改：添加 'expires' 字段，NextAuth.js 需要**
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// NextAuth.js Verification Token Model (用于邮箱验证登录等)
model VerificationToken {
  identifier String
  token      String    @unique
  expires    DateTime

  @@unique([identifier, token])
}

// 您的现有自定义模型

// 手机验证码模型 (与 NextAuth.js 的 VerificationToken 区分)
model VerificationCode {
  phone     String   @id
  code      String
  createdAt DateTime @default(now())
}

model Referral {
  id         String   @id @default(cuid())
  referrerId String
  refereeId  String
  rewarded   Boolean
  createdAt  DateTime @default(now())

  referrer   User     @relation("Referrer", fields: [referrerId], references: [id])
  referee    User     @relation("Referee", fields: [refereeId], references: [id])
}

model Transaction {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id])
  amount          Int
  isFirstTopUp    Boolean  @default(false)
  createdAt       DateTime @default(now())

  // 保留你原本的 string 類型，避免引入 enum 造成更多 schema 變化
  type            String   @default("GENERIC") // "TOPUP", "ADMIN_TOPUP", "USAGE", "REFERRAL_BONUS" ...
  description     String?

  // ✅ 新增：記錄實際執行這次調整的人（多半是管理員的 userId 或 email）
  performedBy     String?

  // ✅ 新增：冪等鍵，避免重複加點（唯一）
  idempotencyKey  String?  @unique

  @@index([userId, createdAt])
}


model TopUpSubmission {
  id           String    @id @default(cuid())
  name         String
  phone        String
  referralCode String?
  imageUrl     String
  createdAt    DateTime  @default(now())
}
// === 新增：文章大綱（與 References 關聯） ===
model Outline {
  id         String     @id @default(cuid())
  userId     String
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  title      String
  content    String     @db.Text         // 大綱全文（可能較長）
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  references Reference[]

  @@index([userId, createdAt])
}

// === 新增：參考文獻 ===
model Reference {
  id          String     @id @default(cuid())
  userId      String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  outlineId   String
  outline     Outline    @relation(fields: [outlineId], references: [id], onDelete: Cascade)

  sectionKey  String                     // 對應大綱段落（如 "I", "II.A" 或自定義 key）
  title       String
  url         String
  doi         String?    @unique         // 單一 DOI 唯一；多筆 NULL 允許
  source      String?                     // 期刊/機構/站名，例如 "Nature"、"NIST"、"Wikipedia"
  authors     String?                     // "Alan Turing; John McCarthy"
  publishedAt DateTime?
  type        String     @default("OTHER")// JOURNAL|BOOK|REPORT|WIKI|NEWS|OTHER（先用字串）
  summary     String?     @db.Text        // 短摘要（可選）
  credibility Int        @default(0)      // 0~100 粗略可信度

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([userId, outlineId, sectionKey])
  @@index([type, credibility])
  @@unique([outlineId, url])             // 同一大綱避免重複存同一 URL
}
